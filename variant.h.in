

#ifndef VARIANT_H
#define VARIANT_H

#ifndef STRING_H
#define STRING_H
#include <string>
#endif // STRING_H

#ifndef LIST_H
#define LIST_H
#include <list>
#endif /* end of include guard: LIST_H */

#ifndef FSTREAM_H
#define FSTREAM_H
#include <fstream>
#endif /* end of include guard: FSTREAM_H */

#ifndef  CTIME_H
#define CTIME_H
#include <ctime>
#endif /* end of include guard: CTIME_H */


#ifndef ALGORITHM_H
#define ALGORITHM_H
#include <algorithm>
#endif

#define VARIANT(vrnt) std##:##:##string variant ## vrnt ## ( ## )

std::string variant( int vrnt );
//std::string variant1();
//std::string variant2();
//std::string variant3();
//std::string variant4();
//std::string variant5();
//std::string variant6();
//std::string variant7();
//std::string variant8();
//std::string variant9();
//std::string variant10();
//std::string variant11();
//std::string variant12();
//std::string variant13();
//std::string variant14();
//std::string variant15();
//std::string variant16();
//std::string variant17();
//std::string variant18();
//std::string variant19();
//std::string variant20();

class Variant {
public:
	struct Stage {
		std::string stageAlphabet;
		int stage;
		Stage( std::string arcsVal, int stageVal);
		Stage& operator=( const Stage& );
	};

	/**
	 * Проверяет, нарушен ли порядок следования дуг.
	 */
	bool isOrdered();

	/**
	 * Проверяет, случайны ли результаты выполнения программы
	 */
	bool isRandom();

	/**
	 * Проверяет, что все дуги графа задействованы
	 */
	bool isFull();

	/**
	 * Проверяет, что предполагаемое параллельное выполнение не выглядит
	 * последовательным (AAABBB) вместо (ABBABA)
	 */
	bool isParallel();

	/**
	 * Заполнение списка mStages из файла
	 * @param variant Номер варианта
	 */

	Variant( int variant );

	/**
	 * Демо, граф №1, вариант 1
	 * Граф: https://github.com/sleeplynerd/lab3-tester/blob/master/demo%20picture/1.png?raw=true
	 */
	Variant();


private:

	static const int DEMO_VRNT = -1;
	const int VRNT;
	std::string mAlphabet;
	std::list<Stage> mStages;
	std::string getOutput();

	/**
	 * Проверка на то, принадлежит ли символ предполагаемой очереди
	 * @param  symbol Символ
	 * @param  stage  Номер очереди
	 */
	bool isEstStage( char symbol, int stage );




	/**
	 * Проверяет, что длина вывода больше длины алфавита.
	 *   Продемонстрировать параллельное выполнение можно в том случае,
	 *   если длина дуг соответствует количеству появляющихся в выводе
	 *   литер потоков. В этом случае длина вывода должна быть больше длины
	 *   алфавита.
	 * @return true, если длина вывода больше длины алфавита
	 */
	bool isLongOutput();

	/**
	 * Получить фрагмент очереди из всего вывода.
	 * @param  stage  Объект очереди
	 * @param  output Весь вывод
	 * @return        Отрезок вывода, соответствующий заданной очереди
	 */
	std::string getStageFragment( const Stage& stage, const std::string& output );
};
#endif //VARIANT_H
