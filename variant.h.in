#ifndef VARIANT_H
#define VARIANT_H

#ifndef STRING_H
#define STRING_H
#include <string>
#endif // STRING_H

#ifndef ALGORITHM_H
#define ALGORITHM_H
#include <algorithm>
#endif

#define VARIANT(vrnt) variant##vrnt##(##)

class Variant {
public:
	bool isOrdered();	// Порядок следования дуг не нарушен
	bool isRandom();	// Результаты выполнения случайны
	bool isFull();		// Все дуги графа задействованы
	bool isParallel();	// Предполагаемое параллельное выполнение
						//   не выглядит последовательным (AAABBB вместо ABABBA)
	Variant( int variant );

private:
	struct Stage {
		const std::string stageAlphabet;
		const int stage;
		Stage( std::string arcsVal, int stageVal);
	};

	static const std::string STG_LIST_DIR( "@STG_LIST_DIR@");
	static const std::string STG_LIST_PFX( "@STG_LIST_PFX@" );
	const int VRNT;
	std::list<Stage> mStages;
	std::string mAlphabet;

	bool isEstStage( char symbol, int stage );
	bool isLongStage( const Stage& stage, const std::string& output )
	bool isParallelStage( const Stage& stage, const std::string& output );
	std::string getStageFragment( const Stage& stage, const std::string& output );
};
#endif //VARIANT_H
